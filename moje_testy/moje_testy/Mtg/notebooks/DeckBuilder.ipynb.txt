{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "0839bfb6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "env: TF_DISABLE_MLC=1\n"
     ]
    }
   ],
   "source": [
    "%env TF_DISABLE_MLC=1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "85d2692e",
   "metadata": {},
   "outputs": [],
   "source": [
    "from mtg.obj.games import Games\n",
    "from mtg.ml.models import DeckBuilder\n",
    "from mtg.ml.trainer import Trainer\n",
    "from mtg.utils.display import print_deck\n",
    "import tensorflow as tf\n",
    "import numpy as np\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "414a36c3",
   "metadata": {},
   "outputs": [],
   "source": [
    "data_file = '/Users/a10889158/personal/mtg/data/game_data_public.KHM.PremierDraft.csv'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "b4c966e7",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/a10889158/miniforge3/envs/personal/lib/python3.8/site-packages/pandas/core/indexing.py:1676: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self._setitem_single_column(ilocs[0], value, pi)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 18.3 s, sys: 7.13 s, total: 25.5 s\n",
      "Wall time: 33.8 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "games = Games(data_file,'khm')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c26e0bac",
   "metadata": {},
   "outputs": [],
   "source": [
    "train_decks,test_decks = games.get_decks_for_ml()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "5a1aeaff",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Epoch 1/5: 100%|██████████| 1873/1873 [00:20<00:00, 93.55Batch/s, loss=1.66]\n",
      "Epoch 2/5: 100%|██████████| 1873/1873 [00:20<00:00, 91.95Batch/s, loss=0.939]\n",
      "Epoch 3/5: 100%|██████████| 1873/1873 [00:20<00:00, 89.41Batch/s, loss=0.853]\n",
      "Epoch 4/5: 100%|██████████| 1873/1873 [00:21<00:00, 88.98Batch/s, loss=0.782]\n",
      "Epoch 5/5: 100%|██████████| 1873/1873 [00:21<00:00, 88.56Batch/s, loss=0.713]\n"
     ]
    }
   ],
   "source": [
    "model = DeckBuilder(len(games.cards))\n",
    "model.compile()\n",
    "t = Trainer(train_decks[0], train_decks[1], model)\n",
    "t.train(5, batch_size=32)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "7b98f35d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "8 island\n",
      "8 mountain\n",
      "1 frenzied raider\n",
      "1 axgard cavalry\n",
      "2 glimpse the cosmos\n",
      "1 dwarven hammer\n",
      "2 tuskeri firewalker\n",
      "3 mistwalker\n",
      "2 demon bolt\n",
      "1 saw it coming\n",
      "1 aegar, the freezing flame\n",
      "1 birgi, god of storytelling // harnfel, horn of bounty\n",
      "1 augury raven\n",
      "2 craven hulk\n",
      "1 basalt ravager\n",
      "1 behold the multiverse\n",
      "1 goldspan dragon\n",
      "1 frostpyre arcanist\n",
      "2 squash\n",
      "\n",
      "SIDEBOARD\n",
      "\n",
      "1 broken wings\n",
      "1 cinderheart giant\n",
      "1 depart the realm\n",
      "2 disdainful stroke\n",
      "1 draugr necromancer\n",
      "2 draugr thought-thief\n",
      "1 immersturm raider\n",
      "1 karfell harbinger\n",
      "1 king harald's revenge\n",
      "1 moritte of the frost\n",
      "1 open the omenpaths\n",
      "1 path to the world tree\n",
      "1 pilfering hawk\n",
      "1 revitalize\n",
      "2 run ashore\n",
      "1 snow-covered forest\n",
      "1 undersea invader\n",
      "1 vega, the watcher\n"
     ]
    }
   ],
   "source": [
    "from mtg.ml.utils import build_from_output\n",
    "deck_idx = 0\n",
    "tpools,tdecks = test_decks\n",
    "pred = tf.squeeze(model(np.expand_dims(tpools[deck_idx],0)))\n",
    "build = build_from_output(pred, tpools[deck_idx], games.cards)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ebf43233",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "personal",
   "language": "python",
   "name": "personal"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
